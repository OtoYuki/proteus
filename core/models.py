# Description: This file contains the models for the core app.
from django.db import models
import uuid
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.utils.translation import gettext_lazy as _
from django.utils import timezone


# Models Shall be defined here
class Role(models.Model):
    """
    Role model for the user.
    """

    role_id = models.AutoField(primary_key=True)
    role_name = models.CharField(max_length=20, unique=True)

    class Meta:
        db_table = "role"
        verbose_name = "Role"
        verbose_name_plural = "Roles"

    def __str__(self):
        return self.role_name


class UserManager(BaseUserManager):
    """Custom manager for User model with email as the identifier."""

    def _create_user(self, email, password=None, **extra_fields):
        """Create and save a User with the provided email and password."""
        if not email:
            raise ValueError("The Email field is a mandatory requirement.")
        email = self.normalize_email(email)

        # Handle the Role Assignment for New Users
        if "role" not in extra_fields:
            try:
                role = Role.objects.get_or_create(role_name="User")[0]
                extra_fields["role"] = role
            except Exception:
                pass  # Will be caught below if no roles exist

        if "role" not in extra_fields:
            raise ValueError("We could not assign a role to the user.")

        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_user(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_staff", False)
        extra_fields.setdefault("is_superuser", False)
        return self._create_user(email, password, **extra_fields)

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)

        if extra_fields.get("is_staff") is not True:
            raise ValueError("Superuser must have is_staff=True.")
        if extra_fields.get("is_superuser") is not True:
            raise ValueError("Superuser must have is_superuser=True.")

        return self._create_user(email, password, **extra_fields)


class User(AbstractUser):
    """Custom User model with email as the primary identifier."""

    user_id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
    )
    role = models.ForeignKey(
        Role,
        on_delete=models.CASCADE,
        related_name="users",
    )
    email = models.EmailField(unique=True)
    username = None  # Remove username field
    created_at = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)
    last_login = models.DateTimeField(null=True, blank=True)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    objects = UserManager()

    class Meta:
        db_table = "users"
        verbose_name = "User"
        verbose_name_plural = "Users"

    def __str__(self):
        return self.email


class ProteinSequence(models.Model):
    """Model to store protein sequences uploaded by the user."""

    sequence_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="protein_sequences"
    )
    sequence_name = models.CharField(max_length=100)
    sequence_fasta = models.TextField()
    upload_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20)
    description = models.TextField(blank=True, null=True)
    sequence_length = models.IntegerField()
    organism = models.CharField(max_length=100, blank=True, null=True)
    source = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        db_table = "protein_sequences"
        verbose_name = "Protein Sequence"
        verbose_name_plural = "Protein Sequences"

    def __str__(self):
        return self.sequence_name


class Prediction(models.Model):
    """Model to store the predictions generated by the model."""

    prediction_id = models.UUIDField(
        primary_key=True, default=uuid.uuid4, editable=False
    )
    sequence = models.ForeignKey(
        ProteinSequence, on_delete=models.CASCADE, related_name="predictions"
    )
    pdb_file_path = models.CharField(max_length=255)
    pae_file_path = models.CharField(max_length=255, blank=True, null=True)
    plddt_score = models.FloatField(blank=True, null=True)
    prediction_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20)
    confidence_score = models.FloatField(blank=True, null=True)
    model_version = models.CharField(max_length=50)
    prediction_metadata = models.JSONField(blank=True, null=True)

    class Meta:
        db_table = "predictions"
        verbose_name = "Prediction"
        verbose_name_plural = "Predictions"

    def __str__(self):
        return f"Prediction for {self.sequence.sequence_name}"


class ValidationMetric(models.Model):
    """Model to store the validation metrics for the predictions."""

    metric_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    prediction = models.ForeignKey(
        Prediction, on_delete=models.CASCADE, related_name="validation_metrics"
    )
    rmsd = models.FloatField(blank=True, null=True)
    rg = models.FloatField(blank=True, null=True)
    energy = models.FloatField(blank=True, null=True)
    trajectory_path = models.CharField(max_length=255, blank=True, null=True)
    validation_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20)
    simulation_parameters = models.JSONField(blank=True, null=True)
    stability_score = models.FloatField(blank=True, null=True)
    validation_notes = models.TextField(blank=True, null=True)

    class Meta:
        db_table = "validation_metrics"
        verbose_name = "Validation Metric"
        verbose_name_plural = "Validation Metrics"

    def __str__(self):
        return f"Validation for {self.prediction}"


class MLRanking(models.Model):
    """Model to store the ML rankings for the predictions."""

    ranking_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    prediction = models.ForeignKey(
        Prediction, on_delete=models.CASCADE, related_name="ml_rankings"
    )
    stability_score = models.FloatField(blank=True, null=True)
    solubility_score = models.FloatField(blank=True, null=True)
    binding_efficiency_score = models.FloatField(blank=True, null=True)
    ranking_date = models.DateTimeField(auto_now_add=True)
    overall_score = models.FloatField(blank=True, null=True)
    feature_importance = models.JSONField(blank=True, null=True)
    model_version = models.CharField(max_length=50)
    ranking_notes = models.TextField(blank=True, null=True)

    class Meta:
        db_table = "ml_ranking"
        verbose_name = "ML Ranking"
        verbose_name_plural = "ML Rankings"

    def __str__(self):
        return f"Ranking for {self.prediction}"


class Log(models.Model):
    """Model to store the logs generated by the system."""

    log_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="logs", null=True, blank=True
    )
    action = models.CharField(max_length=100)
    timestamp = models.DateTimeField(auto_now_add=True)
    details = models.TextField(blank=True, null=True)
    ip_address = models.CharField(max_length=45, blank=True, null=True)
    session_id = models.CharField(max_length=100, blank=True, null=True)
    status = models.CharField(max_length=20)
    component = models.CharField(max_length=50)

    class Meta:
        db_table = "logs"
        verbose_name = "Log"
        verbose_name_plural = "Logs"

    def __str__(self):
        return f"{self.action} by {self.user if self.user else 'System'}"


class SystemMetric(models.Model):
    """Model to store the system metrics generated by the system."""

    metric_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    timestamp = models.DateTimeField(auto_now_add=True)
    cpu_usage = models.FloatField()
    memory_usage = models.FloatField()
    disk_usage = models.FloatField()
    active_jobs = models.IntegerField()
    performance_metrics = models.JSONField(blank=True, null=True)
    status = models.CharField(max_length=20)

    class Meta:
        db_table = "system_metrics"
        verbose_name = "System Metric"
        verbose_name_plural = "System Metrics"

    def __str__(self):
        return f"System Metric at {self.timestamp}"


class JobQueue(models.Model):
    """Model to store the jobs in the job queue."""

    job_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="jobs")
    job_type = models.CharField(max_length=50)
    created_at = models.DateTimeField(auto_now_add=True)
    started_at = models.DateTimeField(null=True, blank=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    status = models.CharField(max_length=20)
    job_parameters = models.JSONField(blank=True, null=True)
    priority = models.IntegerField(default=0)

    class Meta:
        db_table = "job_queue"
        verbose_name = "Job"
        verbose_name_plural = "Jobs"

    def __str__(self):
        return f"{self.job_type} - {self.status}"
